{"ast":null,"code":"var _jsxFileName = \"/Users/frank/Desktop/3\\u110E\\u1161\\u1111\\u1173\\u1105\\u1169\\u110C\\u1166\\u11A8\\u1110\\u1173/Todolist ver 2/semiclonetodo \\u1107\\u1169\\u11A8\\u1109\\u1161\\u1107\\u1169\\u11AB/semiclonetodo/src/components/TodoList.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Input from \"./Input\";\nimport { initTodo } from \"../redux/modules/todos\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = () => {\n  _s();\n  const dispatch = useDispatch();\n  const todos = useSelector(state => state.todos);\n  useEffect(() => {\n    getAxios();\n  }, [getAxios()]);\n  // 위 배열이 없으면 렌더링 할 떄마다 useEffect가 실행이 됨\n\n  const getAxios = () => {\n    axios.get(\"http://localhost:3001/todos\").then(response => dispatch(initTodo(response.data))).catch(error => console.log(error));\n  };\n\n  // 여기서 data는 id:nanoid()todoTitle: title,\n  // isDone: false,\n  // 객체 하나를 받아온다.\n  const addTodo = data => {\n    // 두번째 인자에 데이터를 넣어야함\n    axios.post(\"http://localhost:3001/todos\", data)\n    // 투두 추가한거 보내고, 업데이트 후 다시 받아와야함\n    .then(getAxios());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      addTodo: addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: todos.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: todo.todoTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: todo.isDone.toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)]\n      }, todo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoList, \"o7Q03MspXWTyThwxSzUb4/gicZ0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["axios","React","useEffect","useDispatch","Input","initTodo","useSelector","TodoList","dispatch","todos","state","getAxios","get","then","response","data","catch","error","console","log","addTodo","post","map","todo","todoTitle","isDone","toString","id"],"sources":["/Users/frank/Desktop/3차프로젝트/Todolist ver 2/semiclonetodo 복사본/semiclonetodo/src/components/TodoList.jsx"],"sourcesContent":["import axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Input from \"./Input\";\nimport { initTodo } from \"../redux/modules/todos\";\nimport { useSelector } from \"react-redux\";\n\nconst TodoList = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector((state) => state.todos);\n\n  useEffect(() => {\n    getAxios();\n  }, [getAxios()]);\n  // 위 배열이 없으면 렌더링 할 떄마다 useEffect가 실행이 됨\n\n  const getAxios = () => {\n    axios\n      .get(\"http://localhost:3001/todos\")\n      .then((response) => dispatch(initTodo(response.data)))\n      .catch((error) => console.log(error));\n  };\n\n  // 여기서 data는 id:nanoid()todoTitle: title,\n  // isDone: false,\n  // 객체 하나를 받아온다.\n  const addTodo = (data) => {\n    // 두번째 인자에 데이터를 넣어야함\n    axios\n      .post(\"http://localhost:3001/todos\", data)\n      // 투두 추가한거 보내고, 업데이트 후 다시 받아와야함\n      .then(getAxios());\n  };\n\n  return (\n    <div>\n      <Input addTodo={addTodo} />\n      <div>\n        {todos.map((todo) => (\n          <div key={todo.id}>\n            <h3>{todo.todoTitle}</h3>\n            <p>{todo.isDone.toString()}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TodoList;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,WAAW,QAAQ,aAAa;AAAC;AAE1C,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACrB,MAAMC,QAAQ,GAAGL,WAAW,EAAE;EAC9B,MAAMM,KAAK,GAAGH,WAAW,CAAEI,KAAK,IAAKA,KAAK,CAACD,KAAK,CAAC;EAEjDP,SAAS,CAAC,MAAM;IACdS,QAAQ,EAAE;EACZ,CAAC,EAAE,CAACA,QAAQ,EAAE,CAAC,CAAC;EAChB;;EAEA,MAAMA,QAAQ,GAAG,MAAM;IACrBX,KAAK,CACFY,GAAG,CAAC,6BAA6B,CAAC,CAClCC,IAAI,CAAEC,QAAQ,IAAKN,QAAQ,CAACH,QAAQ,CAACS,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACrDC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EACzC,CAAC;;EAED;EACA;EACA;EACA,MAAMG,OAAO,GAAIL,IAAI,IAAK;IACxB;IACAf,KAAK,CACFqB,IAAI,CAAC,6BAA6B,EAAEN,IAAI;IACzC;IAAA,CACCF,IAAI,CAACF,QAAQ,EAAE,CAAC;EACrB,CAAC;EAED,oBACE;IAAA,wBACE,QAAC,KAAK;MAAC,OAAO,EAAES;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAG,eAC3B;MAAA,UACGX,KAAK,CAACa,GAAG,CAAEC,IAAI,iBACd;QAAA,wBACE;UAAA,UAAKA,IAAI,CAACC;QAAS;UAAA;UAAA;UAAA;QAAA,QAAM,eACzB;UAAA,UAAID,IAAI,CAACE,MAAM,CAACC,QAAQ;QAAE;UAAA;UAAA;UAAA;QAAA,QAAK;MAAA,GAFvBH,IAAI,CAACI,EAAE;QAAA;QAAA;QAAA;MAAA,QAIlB;IAAC;MAAA;MAAA;MAAA;IAAA,QACE;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,GAxCIpB,QAAQ;EAAA,QACKJ,WAAW,EACdG,WAAW;AAAA;AAAA,KAFrBC,QAAQ;AA0Cd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}